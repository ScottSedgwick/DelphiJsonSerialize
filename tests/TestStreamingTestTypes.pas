unit TestStreamingTestTypes;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, JSONSerialize, StreamingTestTypes;

type
  TestTSubObject = class(TTestCase)
  strict private
    FSubObject: TSubObject;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestNullSerialisation;
    procedure TestSerialisation;
  end;

  TestTStreamingType = class(TTestCase)
  strict private
    FStreamingType: TStreamingType;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestNullSerialisation;
    procedure TestSerialisation;
  end;

  TestIStreamingIntf = class(TTestCase)
  strict private
    FStreamingType: IStreamingIntf;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestNullSerialisation;
    procedure TestSerialisation;
  end;

  TestTStreamingRecord = class(TTestCase)
  strict private
    FStreamingType: TStreamingRecord;
  published
    procedure TestNullSerialisation;
    procedure TestSerialisation;
  end;

implementation

{ TestTSubObject }
procedure TestTSubObject.SetUp;
begin
  FSubObject := TSubObject.Create;
end;

procedure TestTSubObject.TearDown;
begin
  FSubObject.Free;
  FSubObject := nil;
end;

procedure TestTSubObject.TestNullSerialisation;
begin
  CheckEquals('{}', JSONString(FSubObject));
end;

procedure TestTSubObject.TestSerialisation;
const
  EXPECTED = '{"JSONSubField1":2309,"JSONSubProperty1":"SubPropertyValue1"}';
begin
  FSubObject.SubField1 := 2309;
  FSubObject.SubProperty1 := 'SubPropertyValue1';
  CheckEquals(EXPECTED, JSONString(FSubObject));
end;

{ TestTStreamingType }

procedure TestTStreamingType.SetUp;
begin
  FStreamingType := TStreamingType.Create;
end;

procedure TestTStreamingType.TearDown;
begin
  FStreamingType.Free;
  FStreamingType := nil;
end;

procedure TestTStreamingType.TestNullSerialisation;
begin
  CheckEquals('{}', JSONString(FStreamingType));
end;

procedure TestTStreamingType.TestSerialisation;
const
  EXPECTED = '{"JSONField1":"Field1Value","JSONSubObject1":{"JSONSubField1":2309,"JSONSubProperty1":"SubPropertyValue1"},"JSONArrayProperty":["Scott","Leslie","Sedgwick"]}';
begin
  FStreamingType.Field1 := 'Field1Value';
  FStreamingType.SubObject1.SubField1 := 2309;
  FStreamingType.SubObject1.SubProperty1 := 'SubPropertyValue1';
  FStreamingType.AddString('Scott');
  FStreamingType.AddString('Leslie');
  FStreamingType.AddString('Sedgwick');
  CheckEquals(EXPECTED, JSONString(FStreamingType));
end;

{ TestIStreamingIntf }

procedure TestIStreamingIntf.SetUp;
begin
  FStreamingType := TStreamingType.Create;
end;

procedure TestIStreamingIntf.TearDown;
begin
  FStreamingType := nil;
end;

procedure TestIStreamingIntf.TestNullSerialisation;
begin
  CheckEquals('{}', JSONString(FStreamingType));
end;

procedure TestIStreamingIntf.TestSerialisation;
const
  EXPECTED = '{"JSONSubObject1":{"JSONSubField1":2309,"JSONSubProperty1":"SubPropertyValue1"}}';
begin
  FStreamingType.SubObject1.SubField1 := 2309;
  FStreamingType.SubObject1.SubProperty1 := 'SubPropertyValue1';
  CheckEquals(EXPECTED, JSONString(FStreamingType));
end;

{ TestTStreamingRecord }

procedure TestTStreamingRecord.TestNullSerialisation;
begin
  CheckEquals('{}', JSONString(@FStreamingType, TypeInfo(TStreamingRecord)));
end;

procedure TestTStreamingRecord.TestSerialisation;
const
  EXPECTED = '{"JSON_A":"Hello","JSON_B":[23,9]}';
begin
  FStreamingType.A := 'Hello';
  FStreamingType.B[0] := 23;
  FStreamingType.B[1] := 9;
  CheckEquals(EXPECTED, JSONString(@FStreamingType, TypeInfo(TStreamingRecord)));
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTSubObject.Suite);
  RegisterTest(TestTStreamingType.Suite);
  RegisterTest(TestIStreamingIntf.Suite);
  RegisterTest(TestTStreamingRecord.Suite);
end.

